
identity n
    <% n %>

concat a b
    <% a %><% b %>

number-single n
    <% identity n %>

number-multiple a b
    <% concat a b %>

identifier-single n
    <% identity n %>

identifier-multiple a b
    <% concat a b %>

identifierRest-single n
    <% identity n %>

identifierRest-multiple a b
    <% concat a b %>

part-number number
        if (input.charCodeAt(offset) === <% number %>) {
            parsed.push({result: input[offset], start: offset, end: offset + 1});
            offset += 1;
        } else {
            return null
        }

part-identifier identifier
        parsed.push(parser.parse("<% identifier %>", input, offset, transform));
        if (parsed[parsed.length - 1] === null) { return null; }
        offset = parsed[parsed.length - 1].end;

part-eof
        if (offset === input.length) {
            parsed.push({result: null, start: offset, end: offset});
        } else {
            return null;
        }

parts-single n
    <% identity n %>

parts-multiple part _ rest
    <% part %><% rest %>

parts-none

rule-withoutSuffix name _ parts _ _
    parser.add("<% name %>", function (input, offset, transform) {
        const parsed = [];
        const startOffset = offset;
    <% parts %>
        const parsedResults = parsed.map(function (p) { return p.result; });
        return {result: parsedResults, start: startOffset, end: offset};
    });

rule-withSuffix name _ parts _ suffix _
    parser.add("<% name %>", function (input, offset, transform) {
        const parsed = [];
        const startOffset = offset;
    <% parts %>
        const parsedResults = parsed.map(function (p) { return p.result; });
        return {result: transform.<% name %>_<% suffix %>.apply(null, parsedResults), start: startOffset, end: offset};
    });

suffix-suffix _ suffix
    <% suffix %>

grammar-single _ rule _
    <% rule %>

grammar-multiple _ rule _ rest
    <% rule %><% rest %>

start-start grammar _
    <% grammar %>

start result
    const parser = {rule: {}};
    parser.add = function (name, parseFunction) {
        let rule = parser.rule[name];
        if (rule === undefined) {
            rule = []; 
            parser.rule[name] = rule;
        }   
        
        rule.push(parseFunction);
    };

    parser.parse = function (name, input, offset, transform) {
        if (name === '.') {
            if (offset === input.length) {
                return {result: null, start: offset, end: offset};
            } else {
                return null;
            }   
        } else if (!isNaN(name)) {
            if (input.charCodeAt(offset) === parseInt(name)) {
                return {result: input[offset], start: offset, end: offset + 1}; 
            } else {
                return null;
            }   
        } else {
            var alternatives = parser.rule[name];
            if (alternatives === undefined) {
                throw new Error('Unknown rule ' + name);
            }   

            for (var i = 0; i < alternatives.length; ++i) {
                var alternative = alternatives[i];
                const result = alternative(input, offset, transform);
                if (result !== null) { return result; }
            }   

            return null;
        }   
    };

    <% result %>

    module.exports.parse = function (input, transform) {
        return parser.parse('start', input, 0, transform);
    };

