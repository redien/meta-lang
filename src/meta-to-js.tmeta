
number-single n
    <% n %>

number-multiple a b
    <% a %><% b %>

identifier-single n
    <% n %>

identifier-multiple a b
    <% a %><% b %>

identifierRest-single n
    <% n %>

identifierRest-multiple a b
    <% a %><% b %>

part-number number
    numberParser.bind(null, <% number %>, returnFromRule)

part-range from _ to
    rangeParser.bind(null, <% from %>, <% to %>, returnFromRule)

part-identifier identifier
    identifierParser.bind(null, "<% identifier %>", returnFromRule, transform)

part-eof
    eofParser.bind(null, returnFromRule)

parts-single n
    <% n %>

parts-multiple part _ rest
    <% rest %>,
                <% part %>

parts-none
    

rule-withoutSuffix name _ parts _ _
    {
        name: "<% name %>",
        parser: function (iterator, transform, returnFromRule) {
            return cont(pipe([
                identity<% parts %>
            ])(initialContinuation(returnFromRule, iterator)), [], iterator);
        }
    },
    

rule-withSuffix name _ parts _ suffix _
    {
        name: "<% name %>",
        parser: function (iterator, transform, returnFromRule) {
            return cont(pipe([
                identity<% parts %>
            ])(initialSuffixContinuation("<% name %>_<% suffix %>", returnFromRule, iterator, transform)), [], iterator);
        }
    },
    

suffix-suffix _ suffix
    <% suffix %>

grammar-single _ rule _
    <% rule %>

grammar-multiple _ rule _ rest
    <% rule %><% rest %>

start-start grammar _
    var slice = Array.prototype.slice;
    function cont (f) {
        var args = arguments;
        var thunk = function () { return f.apply(null, slice.call(args, 1)); }
        thunk.isThunk = true;
        return thunk;
    }
    function identity (x) { return x; }
    function trampoline (thunk) {
        while (thunk && thunk.isThunk) {
            thunk = thunk();
        }
        return thunk;
    }
    function _pipe (a, b) { return function (value) { return b(a(value)); }; }
    function pipe (fs) { return fs.reduce(_pipe) };
    function indexedIterator(input) {
        return {input: input, offset: 0};
    }
    function next(iterator) {
        return {input: iterator.input, offset: iterator.offset + 1};
    }
    function value(iterator) {
        return iterator.input.charCodeAt(iterator.offset);
    }
    function isEnd(iterator) {
        return iterator.offset === iterator.input.length;
    }
    function match (alternatives, iterator, transform, continuation) {
        if (alternatives.length === 0) {
            return cont(continuation, null);
        } else {
            return cont(alternatives[0], iterator, transform, function (result) {
                if (result !== null) { return cont(continuation, result); }
                return cont(match, alternatives.slice(1), iterator, transform, continuation);
            });
        }
    }
    function numberParser (number, returnFromRule, continuation) {
        return function (items, iterator) {
            if (value(iterator) === number) {
                var result = {result: String.fromCharCode(value(iterator)), start: iterator, end: next(iterator)};
                return cont(continuation, items.concat([result]), next(iterator));
            } else {
                return cont(returnFromRule, null);
            }
        };
    }
    function rangeParser (from, to, returnFromRule, continuation) {
        return function (items, iterator) {
            var code = value(iterator);
            if (code >= from && code <= to) {
                var result = {result: String.fromCharCode(code), start: iterator, end: next(iterator)};
                return cont(continuation, items.concat([result]), next(iterator));
            } else {
                return cont(returnFromRule, null);
            }
        };
    }
    function identifierParser (identifier, returnFromRule, transform, continuation) {
        return function (items, iterator) {
            return cont(parse, identifier, iterator, transform, function (result) {
                if (result === null) { return cont(returnFromRule, null); }
                return cont(continuation, items.concat([result]), result.end);
            });
        };
    }
    function eofParser (returnFromRule, continuation) {
        return function (items, iterator) {
            if (isEnd(iterator)) {
                return cont(continuation, items.concat([{result: null, start: iterator, end: iterator}]), iterator);
            } else {
                return cont(returnFromRule, null);
            }
        };
    }
    function initialContinuation (returnFromRule, startIterator) {
        return function (items, iterator) {
            var results = items.map(function (i) { return i.result; });
            return cont(returnFromRule, {result: results, start: startIterator, end: iterator});
        };
    }
    function initialSuffixContinuation (transformer, returnFromRule, startIterator, transform) {
        return function (items, iterator) {
            var results = items.map(function (i) { return i.result; });
            var transformedResults = transform[transformer].apply(null, results);
            return cont(returnFromRule, {result: transformedResults, start: startIterator, end: iterator});
        };
    }
    function parse (name, iterator, transform, continuation) {
        var alternatives = grammar
            .filter(function (rule) { return rule.name === name; })
            .map(function (rule) { return rule.parser; });
        if (alternatives.length === 0) {
            throw new Error('Unknown rule ' + name);
        }
        return cont(match, alternatives, iterator, transform, continuation);
    }
    var grammar = [
    <% grammar %>
    {}
    ];
    module.exports.parse = function (input, transform) {
        return trampoline(cont(parse, 'start', indexedIterator(input), transform, identity));
    };

